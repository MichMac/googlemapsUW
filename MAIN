#!/usr/bin/env python3

import os
api_key = 'AIzaSyAezmqxQYAQXzVQnZPitum5lw6xZPG9HAo' #Klucz api umożliwiający prace z googlemaps API.
import googlemaps
from numpy import*
gmaps = googlemaps.Client(key=api_key) #Za każdym wywołaniem funkcji z biblioteki googlemaps'a potrzebny jest klucz api.
#mainnode = gmaps.geocode('Uniwersytet Wrocławski: Wydział Fizyki i Astronomii, Plac Maksa Borna, Wrocław')[0] # Sposób na wypisanie długości i szerokości geograficznych miejsc, które są potrzebne.
#geocode_step1 = mainnode['geometry']['location'] #zwężanie wyszukiwań.
#geocode_step2 = geocode_step1['lat'], geocode_step1['lng'] #wyciągniecie potrzebnych nam danych.
#print (geocode_step2)
#distance1 = gmaps.distance_matrix('wrocław','lubin')
#distance2 = distance1['rows'][0]['elements'][0]['duration']['value']/60 
#print (distance1)

class MainNode:
	index = 1
	lat = 51.1163217
	lng = 17.02805
	
mainnode = MainNode()





class Node():
	distance = 0
	time = 0
	def __init__(self,lat,lng):
		self.lat = lat
		self.lng = lng
		
	
		
	def GetTime(self,mmainnode):
		distance1 = gmaps.distance_matrix([(self.lat,self.lng)],[(mmainnode.lat,mmainnode.lng)],mode="walking")
		distance2 = distance1['rows'][0]['elements'][0]['duration']['value']/60
		self.time = distance2
		return distance2
		
		
def Lattice(lng_min,lng_max,lat_min,lat_max): # funkcja odpowiadająca za tworzenie punktów
	nodes=[]
	for i in range(0,30):
		row =[]
		for j in range(0,30):
			lat = lat_min + i*(lat_max - lat_min)/30
			lng = lng_min + j*(lng_max - lng_min)/30
			row.append(Node(lat,lng))
		nodes.append(row)
	return nodes

	

nodes = Lattice(17.02,17.03,51.11,51.12)
print(nodes[0][0].GetTime(mainnode))







		
		

	

