#!/usr/bin/env python3

api_key = 'AIzaSyAezmqxQYAQXzVQnZPitum5lw6xZPG9HAo' 
import time_backup
import googlemaps
import matplotlib.pyplot as plt
from scipy.misc import imread
gmaps = googlemaps.Client(key=api_key) 

class MainNode:
	index = 1
	lat = 51.1163217
	lng = 17.02805
	
mainnode = MainNode()

class Node():
	distance = 0
	time = 0
	def __init__(self,lat,lng):
		self.lat = lat
		self.lng = lng
		
	
		
	def GetTime(self,mmainnode):
		
		distance1 = gmaps.distance_matrix([(self.lat,self.lng)],[(mmainnode.lat,mmainnode.lng)],mode="transit")
		if 'duration' in distance1['rows'][0]['elements'][0]:
			distance2 = distance1['rows'][0]['elements'][0]['duration']['value']/60
			self.time = distance2
			return distance2
		else:
			pass
		
def Lattice(lng_min,lng_max,lat_min,lat_max): 
	nodes=[]
	for i in range(0,30):
		row =[]
		for j in range(0,30):
			lat = lat_min + i*(lat_max - lat_min)/30
			lng = lng_min + j*(lng_max - lng_min)/30
			row.append(Node(lat,lng))
		nodes.append(row)
	return nodes


	
#nodes = Lattice(16.932804,17.123005,51.075253,51.168345)

#for i in range(0,30):
#	for j in range(0,30):
#		nodes[i][j].GetTime(mainnode)
#		print(str(i)+" "+str(j)+" "+str(nodes[i][j].time))




nodes_lat=[]
nodes_lng=[]
def ListOfNodes(lng_min,lng_max,lat_min,lat_max):

	for i in range(0,30):
		rowx =[]
		rowy =[]
		for j in range(0,30):
			lat = lat_min + i*(lat_max - lat_min)/30
			lng = lng_min + j*(lng_max - lng_min)/30
			rowx.append(lng)
			rowy.append(lat)
			
		nodes_lat.append(rowy)
		nodes_lng.append(rowx)
	return nodes_lat,nodes_lng

ListOfNodes(16.932804,17.123005,51.075253,51.168345)

x = []
y = []
c = []
for i in range(0,30):
	for j in range(0,30):
		x.append(nodes_lng[i][j])
		y.append(nodes_lat[i][j])
#		c.append(nodes[i][j].time)
		
		
print(x)
print(y)
print(c)


colormap="plasma"

x_data=[x]

y_data=[y]
c_data=[c]
img = imread("staticmap.png")
fig = plt.figure()
fig.set_facecolor('white')
ax = fig.add_subplot(1,1,1)
plt.imshow(img,zorder=0,extent=[16.932804,17.123005,51.075253,51.168345])
plt.xlim(16.932804,17.123005)
plt.ylim(51.075253,51.168345)
p1 = ax.scatter(x_data, y_data, c=c_data_backup, s=50, cmap=colormap, edgecolor='none', alpha=0.9,zorder=1)

ax.grid(True)

fig.colorbar(p1)
plt.show()









		
		

	

